#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import time
import traceback
import logging
import commands


OBJECT_PATH = '.git/objects/'
REFS_PATH   = '.git/refs/'
HEAD_PATH   = '.git/HEAD'
EXPORT_PATH = '.git/obs/'


def _error(errmsg):
    """打印错误并退出"""
    print >>sys.stderr, 'fatal: ' + errmsg
    sys.exit(1)


def _init():
    """初始化工作：切换到工作目录，创建输出目录"""
    old_cwd = os.getcwd()
    while not os.path.isdir('.git'):
        os.chdir('..')

        new_cwd = os.getcwd()
        if old_cwd == new_cwd:
            _error('Not a git repository (or any of the parent directories): .git')

        old_cwd = new_cwd

    if not os.path.isdir(EXPORT_PATH):
        os.mkdir(EXPORT_PATH)
_init()


logging.basicConfig(
    filename=os.path.join(EXPORT_PATH, 'show-objects.log'),
    fliemode='a+',
    level=logging.DEBUG,
    format='[%(asctime)s] %(levelname)s %(message)s',
)


class ImmutableObject(object):
    """对象基类
    Git中的对象都是immutable的，也就是说对象一旦创建就不能修改。
    对象对其属性序列化的，并hash得到唯一标识。
    具有相同属性的对象，hash的结果相同，所以可以共用同一对象。"""
    hash = None

    @property
    def short_hash(self):
        """获取短hash"""
        return self.hash[:6]

    @staticmethod
    def unserialize(hash):
        """反序列化对象文件得到对象
        objpath 对象文件路径"""
        type = commands.getoutput('git cat-file -t %s' % (hash,))
        cls = {'blob': Blob, 'tree': Tree, 'commit': Commit}[type]

        content = commands.getoutput('git cat-file -p %s' % (hash,))

        object_ = cls.loads(hash, content)

        return object_

    @classmethod
    def loads(cls, hash, output):
        """从hash和输出加载对象"""
        raise NotImplementedError('Objects should implement loads classmethod!')


class Blob(ImmutableObject):
    """blob对象: 对应文件内容
    """
    content = None

    @classmethod
    def loads(cls, hash, output):
        """从cat-file的输出加载"""
        object_ = cls()
        object_.hash = hash
        object_.content = output
        return object_

    def __str__(self):
        if len(self.content) <= 6:
            return '%s: %s' % (self.short_hash, self.content)
        else:
            return '%s: %s' % (self.short_hash, self.content[:3] + '...')


class Tree(ImmutableObject):
    """tree对象: 对应目录的内容
    """
    entries = None

    class Entry(object):
        """tree对象条目"""
        mode = None
        type = None
        hash = None
        fname = None

        def __str__(self):
            return self.fname

    @classmethod
    def loads(cls, hash, output):
        """从cat-file的输出加载"""
        object_ = Tree()
        object_.hash = hash
        object_.entries = []
        for line in output.split('\n'):
            entry = Tree.Entry()
            entry.mode, entry.type, info = line.split(' ', 2)
            entry.hash, entry.fname = info.split('\t')
            logging.debug('%s: add entry %s' % (object_.hash, entry.hash))
            object_.entries.append(entry)
        return object_


    def __str__(self):
        return '%s: %d entries' % (self.short_hash, len(self.entries),)


class Commit(ImmutableObject):
    """commit对象: 对应某一个具体的提交"""
    tree = None
    parent = None
    author = None
    committer = None
    message = None

    @classmethod
    def loads(cls, hash, output):
        """从cat-file的输出加载"""
        object_ = cls()
        object_.hash = hash
        object_.parent = []
        object_.message = ''
        info, object_.message = output.split('\n\n')
        for line in info.split('\n'):
            key, val = line.split(' ', 1)
            if key == 'tree':
                object_.tree = val
            elif key == 'parent':
                object_.parent.append(val)
            elif key == 'author':
                object_.author = val
            elif key == 'committer':
                object_.cmmitter = val
            else:
                object_.message += val
        return object_

    def __str__(self):
        return '%s: %s' % (self.short_hash, self.message)


class Index(object):
    """index缓冲区: 该对象是一个单例对象
    index为下一次提交做准备，它保存git跟踪文件及其mode等相关信息的列表"""
    entries = []

    class Entry(object):
        """index的条目"""
        mode = None
        hash = None
        stage = None
        path = None


    @classmethod
    def loads(cls):
        """从index加载该对象"""
        object_ = cls()

        output = commands.getoutput('git ls-files --stage')
        for line in output.split('\n'):
            entry = cls.Entry()
            info, entry.path = line.split('\t')
            entry.mode, entry.hash, entry.stage = info.split(' ')
            object_.entries.append(entry)

        return object_


def get_objects():
    """获取git的所有对象
    返回对象组成的列表"""
    hashes = []

    prefixes = [i for i in os.listdir(OBJECT_PATH) if len(i) == 2]
    for prefix in prefixes:
        suffixes = os.listdir(os.path.join(OBJECT_PATH, prefix))
        hashes += [prefix + i for i in suffixes if len(i) == 38]

    objects = map(ImmutableObject.unserialize, hashes)

    return objects


def get_refs():
    """获取所有指针
    返回指针对(name, hash)列表"""
    refs = []

    for root, _, files in os.walk(REFS_PATH):
        for file in files:
            path = ('%s/%s' % (root, file))
            hash_ = open(path, 'r').read().strip()
            ref = path[len(REFS_PATH):]
            refs.append((ref, hash_))

    return refs


def get_head():
    """获取HEAD的(name, ref)对"""
    HEAD_PREFIX = 'ref: refs/'
    ref = open(HEAD_PATH, 'r').read().strip()[len(HEAD_PREFIX):]
    name = 'HEAD'

    return (name, ref)


def objects2dot(index, objects, refs, head, dotfile):
    """将对象列表及指针相互关系转换为dot文件"""
    dot = 'digraph {\n'

    # blob tree commit
    for object_ in objects:
        if isinstance(object_, Blob):
            dot += '\thash_%s[shape=note, label="%s"];\n' % (object_.hash, str(object_))
        elif isinstance(object_, Tree):
            label = ' | '.join(['<f%d> %s' % (hash(i), i.fname) for i in object_.entries])
            dot += '\thash_%s[shape=record, fontcolor="#2a77c0", label="{%s}"];\n' % (object_.hash, label)
            for entry in object_.entries:
                dot += '\thash_%s:f%d -> hash_%s;\n' % (object_.hash, hash(entry), entry.hash)
        elif isinstance(object_, Commit):
            dot += '\thash_%s[shape=box, style=filled, fillcolor=orange, label="%s"];\n' % (object_.hash, str(object_))
            for parent_hash in object_.parent:
                dot += '\thash_%s -> hash_%s;\n' % (object_.hash, parent_hash)
            dot += '\thash_%s -> hash_%s;\n' % (object_.hash, object_.tree)

    # index
    label = ' | '.join(['<f%d> %s' % (hash(i), i.path) for i in index.entries])
    dot += '\tindex[shape=record, label="{index|%s}"];\n' % (label,)
    for entry in index.entries:
        dot += '\tindex:f%d -> hash_%s;\n' % (hash(entry), entry.hash)

    # refs
    for ref_name, ref_hash in refs:
        dot += '\t"%s" -> hash_%s;\n' % (ref_name, ref_hash)

    # HEAD
    head_name, head_ref = head
    dot += '\t"%s" -> "%s";\n' % (head_name, head_ref)

    dot += '}'

    open(dotfile, 'w+').write(dot)

    return dot


def dot2png(dotfile, pngfile):
    """将dot文件转换为png文件"""
    root, ext = os.path.splitext(dotfile)
    cmd = 'dot -Tpng %s >%s' % (dotfile, pngfile)

    output = commands.getoutput(cmd)
    logging.debug('cmd: %s, output: %s' % (cmd, output))

    return pngfile


def view(pngfile):
    """查看生成的树图文件"""
    os.system('open %s' % (pngfile,))


def main(dotfile, pngfile):
    """主函数"""
    index = Index.loads()
    objects = get_objects()
    refs = get_refs()
    head = get_head()
    objects2dot(index, objects, refs, head, dotfile)
    dot2png(dotfile, pngfile)
    view(pngfile)


if __name__ == '__main__':
    ts = time.time()
    dotfile = os.path.join(EXPORT_PATH, 'objects.dot')
    pngfile = os.path.join(EXPORT_PATH, 'objects_%d.png' % (ts,))

    try:
        main(dotfile, pngfile)
    except Exception as e:
        logging.error(traceback.format_exc(e))
        _error(str(e))
